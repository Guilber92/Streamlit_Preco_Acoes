import streamlit as st
import pandas as pd
import requests
from datetime import date, timedelta
import io

# ============================
# Fun√ß√£o para carregar dados via BRAPI
# ============================
def carregar_dados(empresas, intervalo):
    dados = pd.DataFrame()

    for acao in empresas:
        url = f"https://brapi.dev/api/quote/{acao}?range={intervalo}&interval=1d"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            if "results" in data and len(data["results"]) > 0:
                prices = data["results"][0]["historicalDataPrice"]
                df = pd.DataFrame(prices)
                df["date"] = pd.to_datetime(df["date"], unit="s")
                df.set_index("date", inplace=True)
                df.rename(columns={"close": acao}, inplace=True)
                dados = pd.concat([dados, df[acao]], axis=1)
    return dados

# ============================
# Lista de a√ß√µes da B3
# ============================
acoes = ["PETR4", "VALE3", "ITUB4", "ABEV3", "GGBR4", "MGLU3"]

# ============================
# Layout do App
# ============================
st.set_page_config(page_title="App - Pre√ßo de A√ß√µes", layout="wide")
st.title("üìà App - Pre√ßo de A√ß√µes (BRAPI)")
st.write("Visualize a varia√ß√£o das principais a√ß√µes brasileiras, com filtros e exporta√ß√£o de dados.")

# Sele√ß√£o de a√ß√µes
empresas_selecionadas = st.multiselect(
    "Selecione as a√ß√µes:",
    options=acoes,
    default=acoes
)

# Filtros de per√≠odo r√°pido
periodos = {
    "1 m√™s": "1mo",
    "3 meses": "3mo",
    "6 meses": "6mo",
    "1 ano": "1y",
    "2 anos": "2y",
    "5 anos": "5y",
    "M√°ximo (10 anos)": "10y"
}

intervalo = st.selectbox("Selecione o per√≠odo:", options=list(periodos.keys()), index=5)
mostrar_retorno = st.checkbox("Mostrar retorno percentual (%)", value=False)

# ============================
# L√≥gica principal
# ============================
if empresas_selecionadas:
    st.info("üîÑ Buscando dados, aguarde alguns segundos...")
    dados = carregar_dados(empresas_selecionadas, periodos[intervalo])

    if not dados.empty:
        st.success("‚úÖ Dados carregados com sucesso!")
        
        # Exibir gr√°fico
        if mostrar_retorno:
            dados = (dados / dados.iloc[0] - 1) * 100
            st.line_chart(dados)
            st.write("üìä Retorno percentual acumulado desde o in√≠cio do per√≠odo selecionado")
        else:
            st.line_chart(dados)
            st.write("üí∞ Pre√ßo de fechamento (R$)")
        
        # Mostrar √∫ltimas linhas
        st.dataframe(dados.tail())

        # Exportar dados
        buffer = io.BytesIO()
        dados.to_excel(buffer, index=True)
        st.download_button(
            label="üíæ Baixar dados em Excel",
            data=buffer.getvalue(),
            file_name="dados_acoes.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.error("‚ùå Nenhum dado retornado pela API BRAPI.")
else:
    st.warning("‚ö†Ô∏è Selecione pelo menos uma a√ß√£o para exibir o gr√°fico.")
